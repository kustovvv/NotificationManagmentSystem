version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/usr/local/kong/declarative/kong.yml"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      - product-service
      - auth-service
      - user-service
      - order-service

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: auth-service
    env_file:
      - ./auth-service/.env
    ports:
      - "5006:5001"
    networks:
      - app-network
    depends_on:
      - kafka

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: user-service
    environment:
      DB_HOST: host.docker.internal
    env_file:
      - ./user-service/.env
    ports:
      - "5007:5002"
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - kafka

  product-service:
    build:
      context: .
      dockerfile: ./product-service/Dockerfile
    container_name: product-service
    environment:
      DB_HOST: host.docker.internal
    env_file:
      - ./product-service/.env
    ports:
      - "5008:5003"
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - kafka

  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile
    container_name: order-service
    environment:
      DB_HOST: host.docker.internal
    env_file:
      - ./order-service/.env
    ports:
      - "5009:5004"
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - kafka

networks:
  app-network:
    driver: bridge
